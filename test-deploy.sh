#!/bin/bash

set -e  # –í—ã—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

PROJECT_ID="sonic-harbor-465608-v1"
REGION="europe-west4"
CLUSTER_NAME="blog-cluster"

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–ø–ª–æ—è Flask Blog..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
echo "üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é..."
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q "@"; then
    echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    echo "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: gcloud auth activate-service-account --key-file=key.json"
    exit 1
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç
echo "üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç..."
gcloud config set project $PROJECT_ID

# –°–æ–∑–¥–∞–µ–º Artifact Registry —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
echo "üì¶ –°–æ–∑–¥–∞–µ–º Artifact Registry..."
gcloud artifacts repositories create blog-flask \
    --repository-format=docker \
    --location=$REGION \
    --description="Flask Blog Docker Repository" || echo "‚úì –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º Docker
echo "üê≥ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º Docker..."
gcloud auth configure-docker ${REGION}-docker.pkg.dev

# –ë–∏–ª–¥–∏–º –∏ –ø—É—à–∏–º –æ–±—Ä–∞–∑
echo "üî® –ë–∏–ª–¥–∏–º Docker –æ–±—Ä–∞–∑..."
COMMIT_SHA=$(git rev-parse --short HEAD)
IMAGE_TAG="${REGION}-docker.pkg.dev/${PROJECT_ID}/blog-flask/blog-flask:${COMMIT_SHA}"
IMAGE_LATEST="${REGION}-docker.pkg.dev/${PROJECT_ID}/blog-flask/blog-flask:latest"

docker build -t $IMAGE_TAG .
docker build -t $IMAGE_LATEST .

echo "üì§ –ü—É—à–∏–º –æ–±—Ä–∞–∑ –≤ Artifact Registry..."
docker push $IMAGE_TAG
docker push $IMAGE_LATEST

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä
echo "üèóÔ∏è –°–æ–∑–¥–∞–µ–º GKE –∫–ª–∞—Å—Ç–µ—Ä..."
gcloud container clusters create $CLUSTER_NAME \
    --region=$REGION \
    --num-nodes=1 \
    --machine-type=e2-micro \
    --disk-size=15 \
    --enable-autoscaling \
    --min-nodes=1 \
    --max-nodes=2 \
    --quiet || echo "‚úì –ö–ª–∞—Å—Ç–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

# –ü–æ–ª—É—á–∞–µ–º credentials
echo "üîë –ü–æ–ª—É—á–∞–µ–º credentials –∫–ª–∞—Å—Ç–µ—Ä–∞..."
gcloud container clusters get-credentials $CLUSTER_NAME --region $REGION

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–∑ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ
echo "üìù –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º..."
cp k8s/deployment.yaml k8s/deployment.yaml.backup
sed "s|:latest|:${COMMIT_SHA}|g" k8s/deployment.yaml.backup > k8s/deployment.yaml

# –î–µ–ø–ª–æ–∏–º
echo "üöÄ –î–µ–ø–ª–æ–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."

# –°–æ–∑–¥–∞–µ–º namespace
kubectl apply -f k8s/namespace.yaml

# –ü—Ä–∏–º–µ–Ω—è–µ–º PostgreSQL
kubectl apply -f k8s/postgres.yaml
echo "‚è≥ –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."
kubectl wait --for=condition=available --timeout=300s deployment/postgres -n blog-dev

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
kubectl apply -f k8s/deployment.yaml
kubectl apply -f k8s/service.yaml

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
echo "‚è≥ –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
kubectl rollout status deployment/flask-blog -n blog-dev --timeout=300s

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
mv k8s/deployment.yaml.backup k8s/deployment.yaml

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
echo "üìä –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è:"
kubectl get pods -n blog-dev
echo ""
kubectl get services -n blog-dev

# –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP
echo ""
echo "üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)..."
kubectl get service flask-blog-service -n blog-dev -w &
WATCH_PID=$!

# –ñ–¥–µ–º LoadBalancer IP –º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
for i in {1..30}; do
    EXTERNAL_IP=$(kubectl get service flask-blog-service -n blog-dev -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
    if [[ -n "$EXTERNAL_IP" && "$EXTERNAL_IP" != "null" ]]; then
        kill $WATCH_PID 2>/dev/null || true
        echo ""
        echo "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://$EXTERNAL_IP"
        echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoint
        if curl -s "http://$EXTERNAL_IP/health" | grep -q "ok"; then
            echo "‚úÖ Health check –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ"
        else
            echo "‚ùå Health check –Ω–µ –ø—Ä–æ—à–µ–ª"
        fi
        
        break
    fi
    echo "‚è≥ –ñ–¥–µ–º –≤–Ω–µ—à–Ω–∏–π IP... ($i/30)"
    sleep 10
done

if [[ -z "$EXTERNAL_IP" || "$EXTERNAL_IP" == "null" ]]; then
    kill $WATCH_PID 2>/dev/null || true
    echo ""
    echo "‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–π IP –Ω–µ –ø–æ–ª—É—á–µ–Ω –∑–∞ 5 –º–∏–Ω—É—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ LoadBalancer –≤—Ä—É—á–Ω—É—é:"
    echo "kubectl get service flask-blog-service -n blog-dev"
fi

echo ""
echo "üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–ø–ª–æ—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
