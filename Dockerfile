# ----------------------------------------------------------------
# Dockerfile для Production
# ----------------------------------------------------------------

# 1. Базовый образ
# Используем легковесный и стабильный образ Python
FROM python:3.11-slim

# --- НОВЫЙ ШАГ: Установка системных утилит ---
# Устанавливаем netcat, который нужен нашему entrypoint-скрипту для проверки доступности БД
RUN apt-get update && apt-get install -y netcat-traditional && rm -rf /var/lib/apt/lists/*

# 2. Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# 3. Установка зависимостей
# Копируем сначала только файл с зависимостями. Этот слой будет кэшироваться,
# и переустановка не будет запускаться при каждом изменении кода.
COPY requirements.txt .

# Устанавливаем зависимости, указанные в requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# 4. Копирование кода приложения
# Копируем все файлы из текущей директории в рабочую директорию контейнера,
# включая наш новый скрипт entrypoint.sh
COPY . .

# --- НОВЫЙ ШАГ: Указание точки входа ---
# Делаем наш entrypoint-скрипт исполняемым
RUN chmod +x /app/entrypoint.sh

# Указываем, что контейнер должен запускаться через наш умный скрипт.
# Он дождется БД, применит миграции и только потом выполнит команду CMD.
ENTRYPOINT ["/app/entrypoint.sh"]

# 5. Указываем порт
# Сообщаем Docker, что приложение внутри контейнера будет слушать порт 5000
EXPOSE 5000

# 6. Команда для запуска приложения
# Эта команда будет передана в наш entrypoint.sh как "$@" после того,
# как он завершит подготовку.
CMD ["gunicorn", "wsgi:app", "--bind", "0.0.0.0:5000", "--workers", "3"]