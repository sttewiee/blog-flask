# ----------------------------------------------------------------
# Dockerfile для Production
# ----------------------------------------------------------------

# 1. Базовый образ
# Используем легковесный и стабильный образ Python
FROM python:3.11-slim

# 2. Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# 3. Установка зависимостей
# Копируем сначала только файл с зависимостями. Этот слой будет кэшироваться,
# и переустановка не будет запускаться при каждом изменении кода.
COPY requirements.txt .

# Устанавливаем зависимости, указанные в requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# 4. Копирование кода приложения
# Копируем все файлы из текущей директории в рабочую директорию контейнера
COPY . .

# 5. Указываем порт
# Сообщаем Docker, что приложение внутри контейнера будет слушать порт 5000
EXPOSE 5000

# 6. Команда для запуска приложения
# Запускаем приложение с помощью Gunicorn - производственного WSGI-сервера.
#
#   - wsgi:app: Gunicorn ищет объект `app` в файле `wsgi.py`.
#   - --bind 0.0.0.0:5000: Gunicorn принимает подключения на все IP-адреса
#     внутри контейнера на порту 5000.
#   - --workers 3: Количество рабочих процессов. Хорошее начало - (2 * кол-во ядер CPU) + 1.
#     3 - это безопасное значение по умолчанию.
#
#   Старые ENV-переменные для `flask run` удалены, так как они больше не нужны.
CMD ["gunicorn", "wsgi:app", "--bind", "0.0.0.0:5000", "--workers", "3"]