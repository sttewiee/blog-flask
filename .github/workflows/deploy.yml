# .github/workflows/deploy.yml

# ... (–Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: name, on, jobs, build-and-push) ...

  deploy-to-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: Deploy to Production Server

    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_DOMAIN }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            # --- –®–ê–ì 0: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
            PROJECT_DIR="/home/${{ secrets.PROD_SERVER_USER }}/blog-flask"
            PROD_DIR="$PROJECT_DIR/blog-flask-prod"
            ENV_FILE="$PROD_DIR/.env"
            CERT_DIR="/etc/letsencrypt/live/${{ secrets.PROD_DOMAIN }}"

            # --- –®–ê–ì 1: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ---
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "‚úÖ Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git "$PROJECT_DIR"
            else
              echo "‚úÖ Updating repository..."
              cd "$PROJECT_DIR"
              git pull
            fi
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            cd "$PROD_DIR"

            # --- –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ ---
            echo "‚úÖ Creating/updating .env file..."
            cat <<EOF > $ENV_FILE
            # Auto-generated by GitHub Actions
            POSTGRES_USER=${{ secrets.PROD_DB_USER }}
            POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
            POSTGRES_DB=${{ secrets.PROD_DB_NAME }}
            FLASK_ENV=production
            DATABASE_URL=postgresql://${{ secrets.PROD_DB_USER }}:${{ secrets.PROD_DB_PASSWORD }}@db:5432/${{ secrets.PROD_DB_NAME }}
            SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}
            DOMAIN=${{ secrets.PROD_DOMAIN }}
            EMAIL=${{ secrets.PROD_EMAIL }}
            EOF

            # --- –®–ê–ì 3: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –æ–±—Ä–∞–∑–æ–≤ ---
            echo "‚úÖ Pulling latest Docker images..."
            docker-compose -f docker-compose.prod.yml pull

            # --- –®–ê–ì 4: –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (—Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ) ---
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º
            if ! docker-compose -f docker-compose.prod.yml run --rm --entrypoint "[ -d $CERT_DIR ]" certbot; then
              echo "Ì†ΩÌ¥¥ SSL certificate not found. Attempting to obtain one..."
              
              # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ, —á—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å 80 –ø–æ—Ä—Ç
              docker-compose -f docker-compose.prod.yml down --remove-orphans
              
              # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –¢–û–õ–¨–ö–û Nginx –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
              docker-compose -f docker-compose.prod.yml up -d nginx

              # 3. –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
              echo "‚è≥ Obtaining certificate..."
              docker-compose -f docker-compose.prod.yml run --rm certbot certonly --webroot --webroot-path=/var/www/certbot -d "${{ secrets.PROD_DOMAIN }}" --email "${{ secrets.PROD_EMAIL }}" --agree-tos --no-eff-email --quiet

              # 4. –°–Ω–æ–≤–∞ –≤—Å–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ —Å HTTPS
              echo "‚ôªÔ∏è Restarting services to apply SSL..."
              docker-compose -f docker-compose.prod.yml down --remove-orphans
            else
              echo "‚úÖ SSL certificate found. Skipping obtaining."
            fi

            # --- –®–ê–ì 5: –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã ---
            echo "Ì†ΩÌ∫Ä Starting all services..."
            docker-compose -f docker-compose.prod.yml up -d

            # --- –®–ê–ì 6: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
            echo "Applying database migrations..."
            # –î–∞–µ–º –±–∞–∑–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ up -d
            sleep 10
            docker-compose -f docker-compose.prod.yml exec web flask --app wsgi:app db upgrade
            
            # --- –®–ê–ì 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª) ---
            echo "Ensuring certificate renewal..."
            docker-compose -f docker-compose.prod.yml run --rm certbot renew

            echo "Ì†ºÌæâ Deployment to production completed successfully!"