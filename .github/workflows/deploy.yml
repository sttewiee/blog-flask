# .github/workflows/deploy.yml
# –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç docker-compose (—Å –¥–µ—Ñ–∏—Å–æ–º) –∏ –æ–±—Ö–æ–¥–∏—Ç –±–∞–≥ 'KeyError: ContainerConfig'.

name: Build, Push and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: sttewie/flask-blog:latest

  deploy-to-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: Deploy to Production Server

    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_DOMAIN }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e # –ü—Ä–µ—Ä—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

            # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ---
            export PROJECT_DIR="/home/${{ secrets.PROD_SERVER_USER }}/blog-flask"
            export PROD_DIR="$PROJECT_DIR/blog-flask-prod"
            
            # --- –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ---
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "‚úÖ Cloning repository..."
              git clone https://github.com/sttewiee/blog-flask.git "$PROJECT_DIR"
            else
              echo "‚úÖ Updating repository..."
              cd "$PROJECT_DIR"
              git pull
            fi
            
            cd "$PROD_DIR"

            # --- –°–æ–∑–¥–∞–Ω–∏–µ .env ---
            echo "‚úÖ Creating/updating .env file..."
            cat <<EOF > .env
            POSTGRES_USER=${{ secrets.PROD_DB_USER }}
            POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
            POSTGRES_DB=${{ secrets.PROD_DB_NAME }}
            FLASK_ENV=production
            DATABASE_URL=postgresql://${{ secrets.PROD_DB_USER }}:${{ secrets.PROD_DB_PASSWORD }}@db:5432/${{ secrets.PROD_DB_NAME }}
            SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}
            DOMAIN=${{ secrets.PROD_DOMAIN }}
            EMAIL=${{ secrets.PROD_EMAIL }}
            EOF

            # --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ ---
            echo "‚úÖ Pulling latest Docker images..."
            sudo docker-compose -f docker-compose.prod.yml pull

            # --- –û–±—Ö–æ–¥ –±–∞–≥–∞ 'KeyError: ContainerConfig' ---
            # –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            echo "‚ôªÔ∏è Stopping and removing old containers to prevent bugs..."
            sudo docker-compose -f docker-compose.prod.yml down --remove-orphans

            # --- –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã ---
            echo "Ì†ΩÌ∫Ä Starting all services..."
            sudo docker-compose -f docker-compose.prod.yml up -d

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞/–ø–æ–ª—É—á–µ–Ω–∏–µ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ---
            echo "‚è≥ Checking SSL certificate..."
            sudo docker-compose -f docker-compose.prod.yml run --rm certbot certonly --webroot --webroot-path=/var/www/certbot -d "${{ secrets.PROD_DOMAIN }}" --email "${{ secrets.PROD_EMAIL }}" --agree-tos --no-eff-email --quiet --keep-until-expiring

            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Nginx, —á—Ç–æ–±—ã –æ–Ω –ø–æ–¥—Ö–≤–∞—Ç–∏–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            sudo docker-compose -f docker-compose.prod.yml restart nginx

            # --- –ú–∏–≥—Ä–∞—Ü–∏–∏ ---
            echo "‚è≥ Applying database migrations..."
            sleep 10 # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            sudo docker-compose -f docker-compose.prod.yml exec web flask db upgrade

            echo "Ì†ºÌæâ Deployment to production completed successfully!"