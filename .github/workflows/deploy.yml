name: Build, Push and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: sttewie/flask-blog:latest

  deploy-to-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: Deploy to Production Server
    steps:
      - name: Wait for DNS propagation
        run: |
          echo "Waiting 60 seconds for DNS to propagate..."
          sleep 60
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_DOMAIN }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e

            export PROJECT_DIR="/home/${{ secrets.PROD_SERVER_USER }}/blog-flask"
            export PROD_DIR="$PROJECT_DIR/blog-flask-prod"
            export DOMAIN="${{ secrets.PROD_DOMAIN }}"
            export EMAIL="${{ secrets.PROD_EMAIL }}"
            
            cd "$PROJECT_DIR" && git pull
            cd "$PROD_DIR"

            cat <<EOF > .env
            POSTGRES_USER=${{ secrets.PROD_DB_USER }}
            POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
            POSTGRES_DB=${{ secrets.PROD_DB_NAME }}
            FLASK_ENV=production
            DATABASE_URL=postgresql://${{ secrets.PROD_DB_USER }}:${{ secrets.PROD_DB_PASSWORD }}@db:5432/${{ secrets.PROD_DB_NAME }}
            SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}
            DOMAIN=${{ secrets.PROD_DOMAIN }}
            EMAIL=${{ secrets.PROD_EMAIL }}
            EOF

            # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if [ ! -d "$PROD_DIR/certbot/conf/live/$DOMAIN" ]; then
              echo "‚ö†Ô∏è No certificate found. Creating a dummy certificate for initial Nginx start..."
              sudo mkdir -p "$PROD_DIR/certbot/conf/live/$DOMAIN" "$PROD_DIR/certbot/www"
              sudo docker run --rm --entrypoint "openssl" -v "$PROD_DIR/certbot/conf:/etc/letsencrypt" \
                certbot/certbot:latest req -x509 -nodes -newkey rsa:2048 -days 1 \
                -keyout "/etc/letsencrypt/live/$DOMAIN/privkey.pem" \
                -out "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" \
                -subj "/CN=localhost"
              # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –º—ã —Å–æ–∑–¥–∞–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
              DUMMY_CERT_CREATED=1 
            fi

            # –®–∞–≥ 2: –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã. Nginx –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–ª–∏ —Å—Ç–∞—Ä—ã–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º.
            echo "Ì†ΩÌ∫Ä Starting all services..."
            sudo docker-compose -f docker-compose.prod.yml down --remove-orphans
            sudo docker-compose -f docker-compose.prod.yml up -d

            # –®–∞–≥ 3: –ï—Å–ª–∏ –º—ã —Å–æ–∑–¥–∞–≤–∞–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π
            if [ "$DUMMY_CERT_CREATED" = "1" ]; then
              echo "‚ôªÔ∏è Replacing dummy certificate with a real one from Let's Encrypt..."
              # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ
              sudo rm -rf "$PROD_DIR/certbot/conf/live/$DOMAIN"
              # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π
              sudo docker-compose -f docker-compose.prod.yml run --rm certbot certonly \
                --webroot --webroot-path=/var/www/certbot \
                -d $DOMAIN --email $EMAIL --agree-tos --no-eff-email --non-interactive
              # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º Nginx, —á—Ç–æ–±—ã –æ–Ω –ø–æ–¥—Ö–≤–∞—Ç–∏–ª –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
              echo " Reloading Nginx to apply the new certificate..."
              sudo docker-compose -f docker-compose.prod.yml exec -T nginx nginx -s reload
            else
              echo "‚úÖ Certificate is already valid. Renewing if necessary..."
              sudo docker-compose -f docker-compose.prod.yml run --rm certbot renew
            fi

            # –®–∞–≥ 4: –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            echo "‚è≥ Applying database migrations..."
            sleep 15
            sudo docker-compose -f docker-compose.prod.yml exec -T web flask db upgrade

            echo "Ì†ºÌæâ Deployment to production completed successfully!"