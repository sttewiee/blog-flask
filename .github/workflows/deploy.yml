# .github/workflows/deploy.yml
# –§–∏–Ω–∞–ª—å–Ω–∞—è, —Ä–∞–±–æ—á–∞—è, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç nginx.conf.

name: Build, Push and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: sttewie/flask-blog:latest

  deploy-to-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: Deploy to Production Server

    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_DOMAIN }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e # –ü—Ä–µ—Ä—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

            # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ---
            export PROJECT_DIR="/home/${{ secrets.PROD_SERVER_USER }}/blog-flask"
            export PROD_DIR="$PROJECT_DIR/blog-flask-prod"
            export CERT_DIR="/etc/letsencrypt/live/${{ secrets.PROD_DOMAIN }}"
            
            # --- –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ---
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "‚úÖ Cloning repository..."
              git clone https://github.com/sttewiee/blog-flask.git "$PROJECT_DIR"
            else
              echo "‚úÖ Updating repository..."
              cd "$PROJECT_DIR"
              git pull
            fi
            
            cd "$PROD_DIR"

            # --- –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ ---
            echo "‚úÖ Creating/updating .env file..."
            cat <<EOF > .env
            POSTGRES_USER=${{ secrets.PROD_DB_USER }}
            POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
            POSTGRES_DB=${{ secrets.PROD_DB_NAME }}
            FLASK_ENV=production
            DATABASE_URL=postgresql://${{ secrets.PROD_DB_USER }}:${{ secrets.PROD_DB_PASSWORD }}@db:5432/${{ secrets.PROD_DB_NAME }}
            SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}
            DOMAIN=${{ secrets.PROD_DOMAIN }}
            EMAIL=${{ secrets.PROD_EMAIL }}
            EOF

            # --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ ---
            echo "‚úÖ Pulling latest Docker images..."
            sudo docker-compose -f docker-compose.prod.yml pull

            # --- –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ---
            if ! sudo docker-compose -f docker-compose.prod.yml run --rm --entrypoint "[ -d $CERT_DIR ]" certbot; then
              echo "Ì†ΩÌ¥¥ SSL certificate not found. Performing initial setup..."
              
              # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ–µ–≤–æ–π nginx.conf, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
              if [ -f "./nginx/nginx.conf" ]; then
                mv ./nginx/nginx.conf ./nginx/nginx.conf.bak
              fi
              
              # 2. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π nginx.conf –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
              echo 'events {} http { server { listen 80; server_name ${{ secrets.PROD_DOMAIN }}; location /.well-known/acme-challenge/ { root /var/www/certbot; } } }' > ./nginx/nginx.conf

              # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Nginx
              sudo docker-compose -f docker-compose.prod.yml up -d nginx

              # 4. –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
              echo "‚è≥ Obtaining certificate..."
              sudo docker-compose -f docker-compose.prod.yml run --rm certbot certonly --webroot --webroot-path=/var/www/certbot -d "${{ secrets.PROD_DOMAIN }}" --email "${{ secrets.PROD_EMAIL }}" --agree-tos --no-eff-email --quiet

              # 5. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Nginx
              sudo docker-compose -f docker-compose.prod.yml down --remove-orphans
              
              # 6. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–µ–≤–æ–π nginx.conf –Ω–∞ –º–µ—Å—Ç–æ
              mv ./nginx/nginx.conf.bak ./nginx/nginx.conf
            else
              echo "‚úÖ SSL certificate already exists. Skipping initial setup."
            fi

            # --- –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã ---
            echo "Ì†ΩÌ∫Ä Starting all services..."
            sudo docker-compose -f docker-compose.prod.yml up -d

            # --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π ---
            echo "‚è≥ Applying database migrations..."
            sleep 20
            sudo docker-compose -f docker-compose.prod.yml exec web flask db upgrade
            
            # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ---
            echo "Ensuring certificate is fresh..."
            sudo docker-compose -f docker-compose.prod.yml run --rm certbot renew

            echo "Ì†ºÌæâ Deployment to production completed successfully!"