name: Build, Push and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: sttewie/flask-blog:latest

  deploy-to-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: Deploy to Production Server

    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_DOMAIN }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e
            export PROJECT_DIR="/home/${{ secrets.PROD_SERVER_USER }}/blog-flask"
            export PROD_DIR="$PROJECT_DIR/blog-flask-prod"
            export CERT_DIR="/etc/letsencrypt/live/${{ secrets.PROD_DOMAIN }}"
            
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "‚úÖ Cloning repository..."
              git clone https://github.com/sttewiee/blog-flask.git "$PROJECT_DIR"
            else
              echo "‚úÖ Updating repository..."
              cd "$PROJECT_DIR"
              git pull
            fi
            
            cd "$PROD_DIR"

            echo "‚úÖ Creating/updating .env file..."
            cat <<EOF > .env
            POSTGRES_USER=${{ secrets.PROD_DB_USER }}
            POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
            POSTGRES_DB=${{ secrets.PROD_DB_NAME }}
            FLASK_ENV=production
            DATABASE_URL=postgresql://${{ secrets.PROD_DB_USER }}:${{ secrets.PROD_DB_PASSWORD }}@db:5432/${{ secrets.PROD_DB_NAME }}
            SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}
            DOMAIN=${{ secrets.PROD_DOMAIN }}
            EMAIL=${{ secrets.PROD_EMAIL }}
            EOF

            echo "‚úÖ Pulling latest Docker images..."
            sudo docker-compose -f docker-compose.prod.yml pull

            if ! sudo docker-compose -f docker-compose.prod.yml run --rm --entrypoint "[ -d $CERT_DIR ]" certbot; then
              echo "Ì†ΩÌ¥¥ SSL certificate not found. Setting up..."
              mv ./nginx/nginx.conf ./nginx/nginx.conf.bak
              echo 'events {} http { server { listen 80; server_name ${{ secrets.PROD_DOMAIN }}; location /.well-known/acme-challenge/ { root /var/www/certbot; } } }' > ./nginx/nginx.conf
              sudo docker-compose -f docker-compose.prod.yml up -d nginx
              sudo docker-compose -f docker-compose.prod.yml run --rm certbot certonly --webroot --webroot-path=/var/www/certbot -d "${{ secrets.PROD_DOMAIN }}" --email "${{ secrets.PROD_EMAIL }}" --agree-tos --no-eff-email --quiet
              sudo docker-compose -f docker-compose.prod.yml down --remove-orphans
              mv ./nginx/nginx.conf.bak ./nginx/nginx.conf
            fi

            echo "Ì†ΩÌ∫Ä Starting all services..."
            sudo docker-compose -f docker-compose.prod.yml up -d

            echo "‚è≥ Waiting for database & applying migrations..."
            sleep 20 # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π sleep, –æ–Ω –Ω–∞–¥–µ–∂–Ω–µ–µ –≤ –¥–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
            sudo docker-compose -f docker-compose.prod.yml exec web flask db upgrade
            
            echo "Ensuring certificate is fresh..."
            sudo docker-compose -f docker-compose.prod.yml run --rm certbot renew

            echo "Ì†ºÌæâ Deployment to production completed successfully!"