# .github/workflows/deploy.yml
# –§–∏–Ω–∞–ª—å–Ω–∞—è, –ø–æ–ª–Ω–∞—è, –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–∞—è –≤–µ—Ä—Å–∏—è. –†–µ—à–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã.

name: Build, Push and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: sttewie/flask-blog:latest

  deploy-to-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: Deploy to Production Server

    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_DOMAIN }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e # –ü—Ä–µ—Ä—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

            # --- –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ---
            export PROJECT_DIR="/home/${{ secrets.PROD_SERVER_USER }}/blog-flask"
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "‚úÖ Cloning repository for the first time..."
              git clone https://github.com/sttewiee/blog-flask.git "$PROJECT_DIR"
            else
              echo "‚úÖ Updating repository..."
              cd "$PROJECT_DIR"
              git pull
            fi
            
            cd "$PROJECT_DIR/blog-flask-prod"

            # --- –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ ---
            echo "‚úÖ Creating/updating .env file..."
            cat <<EOF > .env
            POSTGRES_USER=${{ secrets.PROD_DB_USER }}
            POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
            POSTGRES_DB=${{ secrets.PROD_DB_NAME }}
            FLASK_ENV=production
            DATABASE_URL=postgresql://${{ secrets.PROD_DB_USER }}:${{ secrets.PROD_DB_PASSWORD }}@db:5432/${{ secrets.PROD_DB_NAME }}
            SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}
            DOMAIN=${{ secrets.PROD_DOMAIN }}
            EMAIL=${{ secrets.PROD_EMAIL }}
            EOF

            # --- –®–∞–≥ 3: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ ---
            echo "‚úÖ Pulling latest Docker images..."
            sudo docker-compose -f docker-compose.prod.yml pull

            # --- –®–∞–≥ 4: –û–±—Ö–æ–¥ –±–∞–≥–∞ docker-compose v1 ---
            # –í—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º,
            # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ 'KeyError: ContainerConfig'.
            echo "‚ôªÔ∏è Stopping and removing old containers to prevent bugs..."
            sudo docker-compose -f docker-compose.prod.yml down --remove-orphans

            # --- –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ---
            echo "‚è≥ Checking SSL certificate..."
            # –ó–∞–ø—É—Å–∫–∞–µ–º certbot –≤ —Ä–µ–∂–∏–º–µ 'renew'. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ "—É–º–Ω–∞—è":
            # –µ—Å–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ—Ç, –æ–Ω–∞ –µ–≥–æ –ø–æ–ª—É—á–∏—Ç; –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –æ–Ω–∞ –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç.
            # –î–ª—è —ç—Ç–æ–≥–æ –µ–π –Ω—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ 80 –ø–æ—Ä—Ç—É.
            sudo docker-compose -f docker-compose.prod.yml run --rm --service-ports -d nginx
            
            echo "‚è≥ Attempting to obtain/renew certificate..."
            sudo docker-compose -f docker-compose.prod.yml run --rm certbot renew

            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Nginx, —á—Ç–æ–±—ã –æ–Ω –ø–æ–¥—Ö–≤–∞—Ç–∏–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.
            echo "‚ôªÔ∏è Restarting Nginx to apply SSL certificate..."
            sudo docker-compose -f docker-compose.prod.yml restart nginx

            # --- –®–∞–≥ 6: –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ---
            echo "Ì†ΩÌ∫Ä Starting all other services..."
            sudo docker-compose -f docker-compose.prod.yml up -d --remove-orphans

            # --- –®–∞–≥ 7: –£–º–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∏ –º–∏–≥—Ä–∞—Ü–∏—è ---
            echo "‚è≥ Waiting for database to be ready..."
            # –¶–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –∂–¥–µ—Ç, –ø–æ–∫–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
            until sudo docker-compose -f docker-compose.prod.yml exec db pg_isready --username=${{ secrets.PROD_DB_USER }} --quiet; do
                echo "Database is unavailable - sleeping"
                sleep 2
            done
            
            echo "‚úÖ Database is ready! Applying migrations..."
            sudo docker-compose -f docker-compose.prod.yml exec web flask db upgrade

            echo "Ì†ºÌæâ Deployment to production completed successfully!"
            echo "‚úÖ Site is available at: https://${{ secrets.PROD_DOMAIN }}"