# ┌─────────────────────────────────────────────────────────────────────────────┐
# │  .github/workflows/deploy.yml                                              │
# │  Полный файл CI/CD, который:                                               │
# │   1) собирает образ                                                         │
# │   2) пускает его в Docker Hub                                               │
# │   3) по SSH деплоит на сервер, используя docker-compose                      │
# └─────────────────────────────────────────────────────────────────────────────┘

name: Build, Push and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/flask-blog:latest

  deploy-to-dev:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: Deploy to Development Server

    steps:
      - name: Deploy to Dev Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # пример, если SSH на нестандартном порту:
          # port: 2222

          script: |
            # ──────────────────────────────────────────────────────────
            # 1) Переходим в директорию на сервере, где лежат prod-файлы
            cd /home/blog-flask/blog-flask-prod

            # 2) Забираем/обновляем Docker-образ
            docker-compose -f docker-compose.prod.yml pull

            # 3) Перезапускаем контейнеры
            docker-compose -f docker-compose.prod.yml up -d --force-recreate

            # 4) Ждём, чтобы база успела подняться
            sleep 10

            # 5) Запускаем миграции внутри контейнера web
            docker-compose -f docker-compose.prod.yml exec web flask db upgrade

            echo "✅ Deployment completed successfully!"
