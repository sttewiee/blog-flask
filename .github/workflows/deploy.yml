# –≠—Ç–æ—Ç workflow —Å–æ–±–∏—Ä–∞–µ—Ç –æ–±—Ä–∞–∑ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
name: Build, Push and Deploy

on:
  push:
    branches:
      - main # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—É—à–µ –≤ main

jobs:
  # –≠—Ç–∞–ø —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/flask-blog:latest

  # –≠—Ç–∞–ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
  deploy-to-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: Deploy to Production Server

    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø–æ –¥–æ–º–µ–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏, –∞ –Ω–µ –ø–æ IP
          host: ${{ secrets.PROD_DOMAIN }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            PROJECT_DIR="/home/${{ secrets.PROD_SERVER_USER }}/blog-flask"
            PROD_DIR="$PROJECT_DIR/blog-flask-prod"
            ENV_FILE="$PROD_DIR/.env"

            # 1. –ö–ª–æ–Ω–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "‚úÖ Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git "$PROJECT_DIR"
            else
              echo "‚úÖ Updating repository..."
              cd "$PROJECT_DIR"
              git pull
            fi

            # 2. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å prod-—Ñ–∞–π–ª–∞–º–∏
            cd "$PROD_DIR"

            # 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ GitHub
            echo "‚úÖ Creating/updating .env file..."
            cat <<EOF > $ENV_FILE
            # Auto-generated by GitHub Actions
            POSTGRES_USER=${{ secrets.PROD_DB_USER }}
            POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
            POSTGRES_DB=${{ secrets.PROD_DB_NAME }}
            FLASK_ENV=production
            DATABASE_URL=postgresql://${{ secrets.PROD_DB_USER }}:${{ secrets.PROD_DB_PASSWORD }}@db:5432/${{ secrets.PROD_DB_NAME }}
            SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}
            DOMAIN=${{ secrets.PROD_DOMAIN }}
            EMAIL=${{ secrets.PROD_EMAIL }}
            EOF

            # 4. –°–∫–∞—á–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–π Docker-–æ–±—Ä–∞–∑
            echo "‚úÖ Pulling latest Docker image..."
            docker-compose -f docker-compose.prod.yml pull

            # 5. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
            echo "‚úÖ Starting services with Docker Compose..."
            docker-compose -f docker-compose.prod.yml up -d

            # 6. –ü–æ–ª—É—á–∞–µ–º SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç)
            if [ ! -d "/etc/letsencrypt/live/${{ secrets.PROD_DOMAIN }}" ]; then
              echo "‚úÖ Obtaining SSL certificate..."
              sleep 15 # –ñ–¥–µ–º, —á—Ç–æ–±—ã Nginx —Ç–æ—á–Ω–æ —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
              docker-compose -f docker-compose.prod.yml run --rm --entrypoint "/bin/sh -c" certbot 'certbot certonly --webroot --webroot-path /var/www/certbot -d "$DOMAIN" --email "$EMAIL" --agree-tos --no-eff-email --quiet'
              docker-compose -f docker-compose.prod.yml restart nginx
            else
              echo "‚úÖ SSL certificate already exists. Ensuring renewal..."
              # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (–æ–Ω –æ–±–Ω–æ–≤–∏—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ä–æ–∫ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É)
              docker-compose -f docker-compose.prod.yml run --rm --entrypoint "/bin/sh -c" certbot 'renew'
            fi

            # 7. –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            echo "‚úÖ Applying database migrations..."
            docker-compose -f docker-compose.prod.yml exec web flask --app wsgi:app db upgrade

            echo "Ì†ΩÌ∫Ä Deployment to production completed successfully!"