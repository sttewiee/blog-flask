# .github/workflows/deploy.yml
# –§–∏–Ω–∞–ª—å–Ω–∞—è, —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–æ –ø—Ä–µ–¥–µ–ª–∞ –≤–µ—Ä—Å–∏—è. –° –Ω–∞–¥–µ–∂–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.

name: Build, Push and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: sttewie/flask-blog:latest

  deploy-to-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: Deploy to Production Server

    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_DOMAIN }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e 
            export PROJECT_DIR="/home/${{ secrets.PROD_SERVER_USER }}/blog-flask"
            cd "$PROJECT_DIR"
            git pull
            cd "$PROJECT_DIR/blog-flask-prod"

            echo "‚úÖ Creating/updating .env file..."
            cat <<EOF > .env
            POSTGRES_USER=${{ secrets.PROD_DB_USER }}
            POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
            POSTGRES_DB=${{ secrets.PROD_DB_NAME }}
            FLASK_ENV=production
            DATABASE_URL=postgresql://${{ secrets.PROD_DB_USER }}:${{ secrets.PROD_DB_PASSWORD }}@db:5432/${{ secrets.PROD_DB_NAME }}
            SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}
            DOMAIN=${{ secrets.PROD_DOMAIN }}
            EMAIL=${{ secrets.PROD_EMAIL }}
            EOF

            echo "‚úÖ Pulling latest Docker images..."
            sudo docker-compose -f docker-compose.prod.yml pull

            echo "‚ôªÔ∏è Stopping and removing old containers to prevent bugs..."
            sudo docker-compose -f docker-compose.prod.yml down --remove-orphans

            echo "Ì†ΩÌ∫Ä Starting all services..."
            sudo docker-compose -f docker-compose.prod.yml up -d

            echo "‚è≥ Checking/Renewing SSL certificate..."
            sudo docker-compose -f docker-compose.prod.yml run --rm certbot renew

            echo "‚ôªÔ∏è Restarting Nginx to apply SSL certificate..."
            sudo docker-compose -f docker-compose.prod.yml restart nginx

            # --- –ù–ê–î–ï–ñ–ù–û–ï –û–ñ–ò–î–ê–ù–ò–ï –ò –ú–ò–ì–†–ê–¶–ò–Ø ---
            echo "‚è≥ Waiting 30 seconds for services to stabilize..."
            sleep 30
            
            echo "‚úÖ Applying migrations..."
            sudo docker-compose -f docker-compose.prod.yml exec web flask db upgrade

            echo "Ì†ºÌæâ Deployment to production completed successfully!"