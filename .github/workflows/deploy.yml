name: Build, Push and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: sttewie/flask-blog:latest

  deploy-to-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: Deploy to Production Server
    steps:
      - name: Wait for DNS propagation
        run: sleep 60
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_DOMAIN }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e

            export PROJECT_DIR="/home/${{ secrets.PROD_SERVER_USER }}/blog-flask"
            export PROD_DIR="$PROJECT_DIR/blog-flask-prod"
            export DOMAIN="${{ secrets.PROD_DOMAIN }}"
            export EMAIL="${{ secrets.PROD_EMAIL }}"
            
            if [ ! -d "$PROJECT_DIR" ]; then
              git clone https://github.com/sttewiee/blog-flask.git "$PROJECT_DIR"
            else
              cd "$PROJECT_DIR"; git pull
            fi
            
            cd "$PROD_DIR"

            cat <<EOF > .env
            POSTGRES_USER=${{ secrets.PROD_DB_USER }}
            POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
            POSTGRES_DB=${{ secrets.PROD_DB_NAME }}
            FLASK_ENV=production
            DATABASE_URL=postgresql://${{ secrets.PROD_DB_USER }}:${{ secrets.PROD_DB_PASSWORD }}@db:5432/${{ secrets.PROD_DB_NAME }}
            SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}
            DOMAIN=${{ secrets.PROD_DOMAIN }}
            EMAIL=${{ secrets.PROD_EMAIL }}
            EOF

            # –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if [ ! -f "$PROD_DIR/certbot/conf/live/$DOMAIN/fullchain.pem" ]; then
              echo "‚ö†Ô∏è No certificate found. Obtaining a test one..."
              sudo docker-compose -f docker-compose.prod.yml down --remove-orphans || true
              
              sudo docker-compose -f docker-compose.init.yml up -d
              
              # –í–û–ó–í–†–ê–©–ê–ï–ú --staging, –ß–¢–û–ë–´ –û–ë–ï–ó–û–ü–ê–°–ò–¢–¨–°–Ø –û–¢ –õ–ò–ú–ò–¢–û–í
              sudo docker-compose -f docker-compose.init.yml run --rm certbot certonly \
                --staging \
                --webroot --webroot-path=/var/www/certbot \
                -d $DOMAIN --email $EMAIL --agree-tos --no-eff-email --non-interactive
              
              sudo docker-compose -f docker-compose.init.yml down
            fi

            # –≠—Ç–∞–ø 2: –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
            echo "Ì†ΩÌ∫Ä Starting all services in production mode..."
            sudo docker-compose -f docker-compose.prod.yml down --remove-orphans
            sudo docker-compose -f docker-compose.prod.yml up -d

            # –≠—Ç–∞–ø 3: –ú–∏–≥—Ä–∞—Ü–∏–∏
            echo "‚è≥ Applying database migrations..."
            sleep 20 
            sudo docker-compose -f docker-compose.prod.yml exec -T web flask db upgrade

            echo "Ì†ºÌæâ Deployment to production completed successfully!"