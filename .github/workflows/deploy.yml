name: Build, Push and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    name: Build and Push Docker Image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: sttewie/flask-blog:latest

  deploy-to-prod:
    needs: build-and-push
    runs-on: ubuntu-latest
    name: Deploy to Production Server

    steps:
      - name: Wait for DNS propagation
        run: |
          echo "Waiting 60 seconds for DNS to propagate..."
          sleep 60
      
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_DOMAIN }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e # –ü—Ä–µ—Ä—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

            # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ---
            export PROJECT_DIR="/home/${{ secrets.PROD_SERVER_USER }}/blog-flask"
            export PROD_DIR="$PROJECT_DIR/blog-flask-prod"
            export DOMAIN="${{ secrets.PROD_DOMAIN }}"
            export EMAIL="${{ secrets.PROD_EMAIL }}"
            
            # --- –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ---
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "‚úÖ Cloning repository..."
              git clone https://github.com/sttewiee/blog-flask.git "$PROJECT_DIR"
            else
              echo "‚úÖ Updating repository..."
              cd "$PROJECT_DIR"
              git pull
            fi
            
            cd "$PROD_DIR"

            # --- –°–æ–∑–¥–∞–Ω–∏–µ .env ---
            echo "‚úÖ Creating/updating .env file..."
            cat <<EOF > .env
            POSTGRES_USER=${{ secrets.PROD_DB_USER }}
            POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
            POSTGRES_DB=${{ secrets.PROD_DB_NAME }}
            FLASK_ENV=production
            DATABASE_URL=postgresql://${{ secrets.PROD_DB_USER }}:${{ secrets.PROD_DB_PASSWORD }}@db:5432/${{ secrets.PROD_DB_NAME }}
            SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}
            DOMAIN=${{ secrets.PROD_DOMAIN }}
            EMAIL=${{ secrets.PROD_EMAIL }}
            EOF

            # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SSL –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ ---
            if [ ! -d "$PROD_DIR/certbot/conf/live/$DOMAIN" ]; then
              echo "‚ö†Ô∏è No certificate found. Creating a dummy certificate for initial Nginx start..."
              sudo mkdir -p "$PROD_DIR/certbot/conf/live/$DOMAIN" "$PROD_DIR/certbot/www"
              sudo docker run --rm --entrypoint "openssl" -v "$PROD_DIR/certbot/conf:/etc/letsencrypt" \
                certbot/certbot:latest req -x509 -nodes -newkey rsa:2048 -days 1 \
                -keyout "/etc/letsencrypt/live/$DOMAIN/privkey.pem" \
                -out "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" \
                -subj "/CN=localhost"
            fi

            # --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –∏ –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã ---
            echo "‚úÖ Pulling latest Docker images..."
            sudo docker-compose -f docker-compose.prod.yml pull
            
            echo "‚ôªÔ∏è Stopping old containers if any..."
            sudo docker-compose -f docker-compose.prod.yml down --remove-orphans
            
            echo "Ì†ΩÌ∫Ä Starting main services..."
            sudo docker-compose -f docker-compose.prod.yml up -d nginx web db

            # --- –ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ---
            echo "‚è≥ Requesting Let's Encrypt certificate..."
            # –£–ë–ò–†–ê–ï–ú --force-renewal, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ -0001
            sudo docker-compose -f docker-compose.prod.yml run --rm certbot certonly \
              --webroot --webroot-path=/var/www/certbot \
              -d $DOMAIN --email $EMAIL --agree-tos --no-eff-email

            # --- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º Nginx ---
            echo " Reloading Nginx to apply the new certificate..."
            # –î–û–ë–ê–í–õ–Ø–ï–ú -T –¥–ª—è –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            sudo docker-compose -f docker-compose.prod.yml exec -T nginx nginx -s reload

            # --- –ú–∏–≥—Ä–∞—Ü–∏–∏ ---
            echo "‚è≥ Applying database migrations..."
            sleep 20 
            sudo docker-compose -f docker-compose.prod.yml exec -T web flask db upgrade

            echo "Ì†ºÌæâ Deployment to production completed successfully!"