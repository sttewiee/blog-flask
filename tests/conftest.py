# tests/conftest.py
import pytest
import os
from app import create_app, db as _db

@pytest.fixture(scope='session')
def app():
    """
    Создает и конфигурирует экземпляр Flask-приложения для всей тестовой сессии.

    Эта фикстура выполняется один раз за запуск pytest.
    """
    # -------------------------------------------------------------------
    # 1. Установка переменных окружения для тестового режима.
    #    Это делается ДО создания приложения, чтобы фабрика `create_app`
    #    сразу подхватила правильную конфигурацию.
    # -------------------------------------------------------------------

    # Указываем имя СУЩЕСТВУЮЩЕЙ базы данных, созданной в docker-compose.yml.
    # Тесты будут создавать и удалять таблицы внутри этой базы.
    os.environ['DATABASE_URL'] = 'postgresql://postgres:postgres@localhost:5432/postgres'
    os.environ['SECRET_KEY'] = 'test_secret_key_for_pytest'
    os.environ['TESTING'] = 'True'
    # Эта переменная отключает защиту CSRF в формах, что упрощает тесты.
    # В реальном приложении она должна быть 'True'.
    os.environ['WTF_CSRF_ENABLED'] = 'False'

    # -------------------------------------------------------------------
    # 2. Создание экземпляра приложения с помощью фабрики.
    # -------------------------------------------------------------------
    _app = create_app()

    # -------------------------------------------------------------------
    # 3. Подготовка базы данных.
    #    Это выполняется в контексте приложения.
    # -------------------------------------------------------------------
    with _app.app_context():
        # Создаем все таблицы, описанные в моделях (user, post).
        _db.create_all()

    # `yield` передает управление pytest для запуска тестов.
    yield _app

    # -------------------------------------------------------------------
    # 4. Очистка после завершения всех тестов.
    #    Этот код выполнится после того, как все тесты в сессии завершатся.
    # -------------------------------------------------------------------
    with _app.app_context():
        # Удаляем все таблицы, чтобы не загрязнять базу данных.
        _db.drop_all()


@pytest.fixture()
def client(app):
    """
    Предоставляет тестовый клиент для отправки запросов к приложению.
    Эта фикстура выполняется для каждого теста.
    """
    return app.test_client()


@pytest.fixture()
def db(app):
    """
    Предоставляет доступ к экземпляру SQLAlchemy для работы с БД в тестах.
    """
    with app.app_context():
        yield _db